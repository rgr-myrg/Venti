Venti!

Ridiculously super tiny framework for JavaScript custom events. 

Build your event driven app in minutes.

Venti! uses the Publisher/Subscriber design pattern to notify events and data.

Quick usage example:

var e = new Venti.Event;
e.add(function(){console.log('Hello Venti!');});
e.notify();

>Console output: Hello Venti!

Another example:

var log={
	debug: function(msg){
		console.log(msg);
	}
};

var e = new Venti.Event;
e.add(log.debug);
e.notify('Hello Venti! World');

>Console output: Hello Venti! World

It is possible to retain the scope of the listener by specifying the scope (parent object).

Example:

var log = new function(){
	var txt = 'Logger says: '; //private var
	this.debug = function(msg){
		console.log(txt + msg);
	};
};

var e = new Venti.Event;
e.add(log.debug, log);
e.notify('Hello World I'm Venti!');

>Console output: Logger says: Hello World I'm Venti!

Description

An Event is basically a stack of listeners, so you can use add() method to attach  
functions to the stack.

Using notify() method, the listener stack will be notified and data will be applied 
to each listener function in the stack.

Please see ui-box.html in the example folder for a quick tutorial.

Any questions/comments? Contact me devshop.me@gmail.com


 

